{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"4D0_eAfh6Tm5"},"outputs":[],"source":["import torch\n","import torchvision.transforms as T\n","from torchvision.models.detection import fasterrcnn_resnet50_fpn\n","import cv2\n","import numpy as np\n","from google.colab import drive"]},{"cell_type":"markdown","metadata":{"id":"qY-vkbRL1NdE"},"source":["# 1. Connect Colab to Github\n"]},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1624,"status":"ok","timestamp":1697095986242,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"},"user_tz":-120},"id":"_Vhsdn_71SPT","outputId":"076edfa5-6dfa-4476-d481-f8ba20bbdd10"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":30,"metadata":{"id":"239NQ3qa3W7V","executionInfo":{"status":"ok","timestamp":1697096736616,"user_tz":-120,"elapsed":870,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"}}},"outputs":[],"source":["import os\n","os.chdir('/content/drive/MyDrive/colab_github')"]},{"cell_type":"code","source":["!gid add .\n","!git commit -m \"adding Python daily study plan\"\n","!git push -u origin master"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t6GLwr3Y2TFU","executionInfo":{"status":"ok","timestamp":1697097566577,"user_tz":-120,"elapsed":246,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"}},"outputId":"532bccd5-d1ec-44c0-a548-9303c8353993"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["/bin/bash: line 1: gid: command not found\n","On branch main\n","\n","Initial commit\n","\n","Untracked files:\n","  (use \"git add <file>...\" to include in what will be committed)\n","\t\u001b[31mPython daily study.gdoc\u001b[m\n","\n","nothing added to commit but untracked files present (use \"git add\" to track)\n","error: src refspec master does not match any\n","\u001b[31merror: failed to push some refs to 'https://github.com/appliedDA/colab_github.git'\n","\u001b[m"]}]},{"cell_type":"code","source":["!git status"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oMW96KxC5jCC","executionInfo":{"status":"ok","timestamp":1697097599397,"user_tz":-120,"elapsed":5,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"}},"outputId":"11235cb9-7241-4fd4-908b-2baecef506ef"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["On branch main\n","\n","No commits yet\n","\n","Untracked files:\n","  (use \"git add <file>...\" to include in what will be committed)\n","\t\u001b[31mPython daily study.gdoc\u001b[m\n","\n","nothing added to commit but untracked files present (use \"git add\" to track)\n"]}]},{"cell_type":"code","source":["!git add"],"metadata":{"id":"UK5PRk735oQo","executionInfo":{"status":"ok","timestamp":1697097622752,"user_tz":-120,"elapsed":391,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"}},"outputId":"09082350-fdf8-40c1-889f-614a67588fa9","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["Nothing specified, nothing added.\n","\u001b[33mhint: Maybe you wanted to say 'git add .'?\u001b[m\n","\u001b[33mhint: Turn this message off by running\u001b[m\n","\u001b[33mhint: \"git config advice.addEmptyPathspec false\"\u001b[m\n"]}]},{"cell_type":"code","source":["  !git config --global user.email \"applieddatasciencemalmo@gmail.com\"\n","  !git config --global user.name \"appliedDA\""],"metadata":{"id":"YImOcPlT4ys3","executionInfo":{"status":"ok","timestamp":1697097543956,"user_tz":-120,"elapsed":267,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","execution_count":32,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":689,"status":"ok","timestamp":1697096764296,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"},"user_tz":-120},"id":"_4QBbQPU5Ckj","outputId":"aeddbb89-938e-4b64-fc3d-786702f602ac"},"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'colab_github'...\n","warning: You appear to have cloned an empty repository.\n"]}],"source":["!git clone https://github.com/appliedDA/colab_github.git"]},{"cell_type":"code","source":["cd colab_github/"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SXJQ5iCW0N2r","executionInfo":{"status":"ok","timestamp":1697096901737,"user_tz":-120,"elapsed":3,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"}},"outputId":"37147fb9-2b8b-4ab9-df1f-cfbbe452d0d2"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/colab_github/colab_github\n"]}]},{"cell_type":"code","source":["ls"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qxDnkM5328PD","executionInfo":{"status":"ok","timestamp":1697096912715,"user_tz":-120,"elapsed":3,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"}},"outputId":"622aa987-f625-4897-de17-a8ac471342ae"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["'Python daily study.gdoc'\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"j3Cg2sXjNoZa"},"outputs":[],"source":["!git config --global user.email \"applieddatasciencemalmo@gmail.com\"\n","!git config --global user.name \"sjwinds\""]},{"cell_type":"code","execution_count":26,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":254,"status":"ok","timestamp":1697096207068,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"},"user_tz":-120},"id":"AGOzHK6bbMmz","outputId":"83545124-7ae5-411f-d6af-61e2215a62db"},"outputs":[{"output_type":"stream","name":"stdout","text":["On branch master\n","Your branch is up to date with 'origin/master'.\n","\n","Untracked files:\n","  (use \"git add <file>...\" to include in what will be committed)\n","\t\u001b[31m\"Dialog och verbbo\\314\\210jningar.docx\"\u001b[m\n","\t\u001b[31m\"Shijun Feng Resume\\314\\201.docx\"\u001b[m\n","\n","nothing added to commit but untracked files present (use \"git add\" to track)\n"]}],"source":["!git status"]},{"cell_type":"code","execution_count":28,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":269,"status":"ok","timestamp":1697096309765,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"},"user_tz":-120},"id":"RyAtkN3psNJl","outputId":"66a1e8d5-7c60-47a0-e221-5da878bba851"},"outputs":[{"output_type":"stream","name":"stdout","text":["'Dialog och verbböjningar.docx'   README.md\n"," hello.html                      'Shijun Feng Resumé.docx'\n"," Python_1_hour_per_day.ipynb     'Study plan.gdoc'\n"]}],"source":["ls"]},{"cell_type":"code","execution_count":29,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":625,"status":"ok","timestamp":1697096370426,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"},"user_tz":-120},"id":"laDdd9NzMcwo","outputId":"2c014329-f88f-43a2-c889-40aa4a190892"},"outputs":[{"output_type":"stream","name":"stdout","text":["error: open(\"Study plan.gdoc\"): Operation not supported\n","error: unable to index file 'Study plan.gdoc'\n","fatal: adding files failed\n","Author identity unknown\n","\n","*** Please tell me who you are.\n","\n","Run\n","\n","  git config --global user.email \"you@example.com\"\n","  git config --global user.name \"Your Name\"\n","\n","to set your account's default identity.\n","Omit --global to set the identity only in this repository.\n","\n","fatal: unable to auto-detect email address (got 'root@f9692d88cb3e.(none)')\n","fatal: could not read Username for 'https://github.com': No such device or address\n"]}],"source":["!git add .\n","!git commit -m \"My commit message\"\n","!git push -u origin master"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":999,"status":"ok","timestamp":1697053227080,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"},"user_tz":-120},"id":"1Z9hwvS-P2RC","outputId":"86c3d6e0-cd6c-4b53-d154-ac0234228772"},"outputs":[{"name":"stdout","output_type":"stream","text":["From https://github.com/sjwinds/hello\n"," * branch            master     -> FETCH_HEAD\n","Already up to date.\n"]}],"source":["!git pull origin master"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":800,"status":"ok","timestamp":1697053260732,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"},"user_tz":-120},"id":"KlLwg_hjQVaX","outputId":"9bc2b341-2205-4249-8aee-5a1c588aa55d"},"outputs":[{"name":"stdout","output_type":"stream","text":["On branch master\n","Your branch is ahead of 'origin/master' by 1 commit.\n","  (use \"git push\" to publish your local commits)\n","\n","nothing to commit, working tree clean\n","fatal: could not read Username for 'https://github.com': No such device or address\n"]}],"source":["!git add .\n","!git commit -m \"Your commit message\"\n","!git push origin master"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":491,"status":"ok","timestamp":1697053282851,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"},"user_tz":-120},"id":"7lVz9FbpQgA6","outputId":"4e681fe2-0945-4246-daa2-5e379e73521f"},"outputs":[{"name":"stdout","output_type":"stream","text":["fatal: could not read Username for 'https://github.com': No such device or address\n"]}],"source":["!git push"]},{"cell_type":"markdown","metadata":{"id":"N6D2N4Ax1acs"},"source":["# New Section"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8apaI-H36qXe"},"outputs":[],"source":["model = fasterrcnn_resnet50_fpn(pretrained = True)\n","model.eval()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20355,"status":"ok","timestamp":1696963971676,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"},"user_tz":-120},"id":"DP3H9Tw27S2n","outputId":"7404604a-3a0d-47fd-b261-7aaf4d5c2032"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lSaMD5ao7CH6"},"outputs":[],"source":["# open a video file\n","video_path = '/content/drive/MyDrive/Colab Notebooks/Movie on 2023-08-09 at 20.31.mov'\n","cap = cv2.VideoCapture(video_path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GDNUH5yS8NbH"},"outputs":[],"source":["# check if the video file opened successfully\n","if not cap.isOpened():\n","    print(\"Error: could not open video\")\n","    exit()"]},{"cell_type":"markdown","metadata":{"id":"2tPP4MH77VSM"},"source":["# New Section"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"He7CNuLf8lsa"},"outputs":[],"source":["# define a transformation to be applied to each frame\n","transform = T.Compose([T.ToTensor()])\n","\n","while True:\n","    # read a frem from the video\n","    ret, frame = cap.read()\n","\n","    # check if the video has ended\n","    if not ret:\n","        break\n","\n","    # convert the frame to a Pytorch tensor\n","    input_tensor = transform(frame).unsqueeze(0)\n","\n","    # forward pass through the model"]},{"cell_type":"markdown","metadata":{"id":"uvr2PmBl8hQ3"},"source":["# Use openCV"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vdut-huz-EAC"},"outputs":[],"source":["import cv2\n","from google.colab.patches import cv2_imshow\n","# Open a video file\n","video_path = '/content/drive/MyDrive/Colab Notebooks/Movie on 2023-08-09 at 20.31.mov'\n","cap = cv2.VideoCapture(video_path)\n","\n","# Loop through frames in the video\n","while True:\n","    # Read a frame from the video\n","    ret, frame = cap.read()\n","\n","    # Check if the video has ended\n","    if not ret:\n","        break\n","\n","    # Your processing on the frame goes here...\n","\n","    # Display the frame (optional)\n","    cv2_imshow(frame)\n","\n","    # Break the loop if 'q' key is pressed\n","    if cv2.waitKey(25) & 0xFF == ord('q'):\n","        break\n","\n","# Release the video capture object and close all windows\n","cap.release()\n","cv2.destroyAllWindows()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17195,"status":"ok","timestamp":1696965159473,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"},"user_tz":-120},"id":"i5H2XlKDARxV","outputId":"5ea4029d-1fad-4af2-d657-1fc1e89ed2ef"},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: opencv-python in /usr/local/lib/python3.10/dist-packages (4.8.0.76)\n","Collecting opencv-python\n","  Downloading opencv_python-4.8.1.78-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (61.7 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m61.7/61.7 MB\u001b[0m \u001b[31m5.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy>=1.21.2 in /usr/local/lib/python3.10/dist-packages (from opencv-python) (1.23.5)\n","Installing collected packages: opencv-python\n","  Attempting uninstall: opencv-python\n","    Found existing installation: opencv-python 4.8.0.76\n","    Uninstalling opencv-python-4.8.0.76:\n","      Successfully uninstalled opencv-python-4.8.0.76\n","Successfully installed opencv-python-4.8.1.78\n"]}],"source":["pip install --upgrade opencv-python"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1696965181428,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"},"user_tz":-120},"id":"q7A2JzSs-LS3","outputId":"87ecdecf-57c3-4be2-d66b-62a5076b61f5"},"outputs":[{"name":"stdout","output_type":"stream","text":["Error: Could not open camera.\n","Error: Could not read frame.\n"]}],"source":["import cv2\n","\n","# Open the default camera (camera index 0)\n","cap = cv2.VideoCapture(0)\n","\n","# Check if the camera opened successfully\n","if not cap.isOpened():\n","    print(\"Error: Could not open camera.\")\n","    exit()\n","\n","# Loop to continuously capture frames from the camera\n","while True:\n","    # Read a frame from the camera\n","    ret, frame = cap.read()\n","\n","    # Check if the frame was read successfully\n","    if not ret:\n","        print(\"Error: Could not read frame.\")\n","        break\n","\n","    # Display the frame\n","    cv2.imshow('Camera Feed', frame)\n","\n","    # Break the loop if 'q' key is pressed\n","    if cv2.waitKey(1) & 0xFF == ord('q'):\n","        break\n","\n","# Release the camera capture object and close all windows\n","cap.release()\n","cv2.destroyAllWindows()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HknitlLI_NCw"},"outputs":[],"source":["from google.colab import output\n","\n","# Request access to the camera\n","output.eval_js('new Promise((resolve, reject) => { navigator.mediaDevices.getUserMedia({ video: true }).then((stream) => { console.log(\"Access granted\"); resolve(); }).catch((error) => { console.error(\"Error accessing camera:\", error); reject(); }); });')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vDaC0PIzIJ3l"},"outputs":[],"source":["from google.colab import output\n","\n","# Request access to the camera\n","output.eval_js('''\n","  const video = document.createElement('video');\n","  document.body.appendChild(video);\n","  navigator.mediaDevices.getUserMedia({ video: true })\n","      .then((stream) => {\n","          video.srcObject = stream;\n","          video.play();\n","      });\n","''')\n","break"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":350},"executionInfo":{"elapsed":3,"status":"error","timestamp":1696965383286,"user":{"displayName":"Shijun Feng","userId":"06232277944844360601"},"user_tz":-120},"id":"Pj97g8-EAxeQ","outputId":"864d221c-fee4-4c12-d45a-a5b42bbabd0c"},"outputs":[{"ename":"error","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31merror\u001b[0m                                     Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-73666e8369ce>\u001b[0m in \u001b[0;36m<cell line: 25>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;31m# Run the capture_frames function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m \u001b[0mcapture_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-6-73666e8369ce>\u001b[0m in \u001b[0;36mcapture_frames\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m             \u001b[0;31m# Convert the frame to RGB format\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m             \u001b[0mrgb_frame\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcvtColor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCOLOR_BGR2RGB\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m             \u001b[0;31m# Display the frame in the Colab notebook\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31merror\u001b[0m: OpenCV(4.8.1) /io/opencv/modules/imgproc/src/color.cpp:182: error: (-215:Assertion failed) !_src.empty() in function 'cvtColor'\n"]}],"source":["import cv2\n","import numpy as np\n","from IPython.display import display, Image, HTML\n","\n","# Function to capture video frames\n","def capture_frames():\n","    # Open the camera\n","    cap = cv2.VideoCapture(0)\n","\n","    try:\n","        while True:\n","            # Capture a frame\n","            ret, frame = cap.read()\n","\n","            # Convert the frame to RGB format\n","            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n","\n","            # Display the frame in the Colab notebook\n","            display(Image(data=cv2.imencode('.png', rgb_frame)[1]))\n","    finally:\n","        # Release the camera when done\n","        cap.release()\n","\n","# Run the capture_frames function\n","capture_frames()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6WAC-YVkA-g1"},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOVIvaZGsgwpYyY+pZt6j2w"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}